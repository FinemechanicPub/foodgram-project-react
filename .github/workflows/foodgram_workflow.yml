name: Foodgram workflow

on: [push]

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9"]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: | 
        python -m pip install --upgrade pip 
        pip install flake8 pep8-naming flake8-broken-line flake8-return
        pip install -r backend/requirements.txt 

    - name: Test with flake8
      run: |
        python -m flake8
  build_and_push_to_docker_hub:
    name: Build and push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2 
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1 
      - name: Login to Docker 
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2 
        with:
          file: backend/Dockerfile
          context: backend/
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/foodgram
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    if: github.ref == 'refs/heads/master'
    steps:
    - name: executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          cd deployment
          sudo docker compose stop
          sudo docker compose rm web
          sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/foodgram
          touch .env
          rm .env
          touch .env
          echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env    
          echo POSTGRES_DB=${{ secrets.DB_NAME }} >> .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          echo "DJANGO_SECRET=${{ secrets.DJANGO_SECRET }}" >> .env
          sudo docker compose up -d
          sudo docker compose exec -it web python manage.py migrate
